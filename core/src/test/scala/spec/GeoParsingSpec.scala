package spec

import fabric._
import fabric.rw._
import fabric.io.{JsonFormatter, JsonParser}
import lightdb.spatial._
import org.scalatest.matchers.should.Matchers
import org.scalatest.wordspec.AnyWordSpec

@EmbeddedTest
class GeoParsingSpec extends AnyWordSpec with Matchers {
  "Geo Parsing" should {
    "parse a String point" in {
      val geo = Geo.parseString("POINT(-103.793467263 32.331700182)")
      geo should be(Point(
        latitude = 32.331700182,
        longitude = -103.793467263
      ))
    }
    "parse a JSON point" in {
      val json = JsonParser("""{"crs": {"type": "name", "properties": {"name": "urn:ogc:def:crs:EPSG::4269"}}, "type": "Point", "coordinates": [-103.793467263, 32.331700182]}""")
      val geo = Geo.parse(json)
      geo should be(Point(
        latitude = 32.331700182,
        longitude = -103.793467263
      ))
    }
    "parse a String polygon" in {
      val geo = Geo.parseString("""POLYGON((-104.260036453 32.598867934,-104.242881455 32.598815009,-104.225751274 32.598860916,-104.225734354 32.602483742,-104.242847836 32.602447649,-104.260003704 32.602492467,-104.260003848 32.602476407,-104.260036453 32.598867934))""")
      geo should be(Polygon(List(
        Point(longitude = -104.260036453, latitude = 32.598867934),
        Point(longitude = -104.242881455, latitude = 32.598815009),
        Point(longitude = -104.225751274, latitude = 32.598860916),
        Point(longitude = -104.225734354, latitude = 32.602483742),
        Point(longitude = -104.242847836, latitude = 32.602447649),
        Point(longitude = -104.260003704, latitude = 32.602492467),
        Point(longitude = -104.260003848, latitude = 32.602476407),
        Point(longitude = -104.260036453, latitude = 32.598867934)
      )))
    }
    "parse a JSON polygon" in {
      val json = JsonParser("""{"crs": {"type": "name", "properties": {"name": "urn:ogc:def:crs:EPSG::4269"}}, "type": "GeometryCollection", "geometries": [{"type": "Polygon", "coordinates": [[[-104.260036453, 32.598867934], [-104.242881455, 32.598815009], [-104.225751274, 32.598860916], [-104.225734354, 32.602483742], [-104.242847836, 32.602447649], [-104.260003704, 32.602492467], [-104.260003848, 32.602476407], [-104.260036453, 32.598867934]]]}]}""")
      val geo = Geo.parse(json)
      geo should be(Polygon(List(
        Point(longitude = -104.260036453, latitude = 32.598867934),
        Point(longitude = -104.242881455, latitude = 32.598815009),
        Point(longitude = -104.225751274, latitude = 32.598860916),
        Point(longitude = -104.225734354, latitude = 32.602483742),
        Point(longitude = -104.242847836, latitude = 32.602447649),
        Point(longitude = -104.260003704, latitude = 32.602492467),
        Point(longitude = -104.260003848, latitude = 32.602476407),
        Point(longitude = -104.260036453, latitude = 32.598867934)
      )))
    }
    "parse a String multipolygon" in {
      val geo = Geo.parseString("""MULTIPOLYGON(((-103.894776713 32.000149899,-103.890489841 32.000150665,-103.890490162 32.002410672,-103.894776629 32.002407742,-103.894776713 32.000149899)),((-103.894818052 32.020661933,-103.894807646 32.017011035,-103.894797235 32.013359954,-103.894786827 32.009709053,-103.894776598 32.006058151,-103.894776611 32.004581088,-103.894776574 32.003104024,-103.890490727 32.003106436,-103.890490669 32.006061933,-103.890527994 32.020667698,-103.894818052 32.020661933)))""")
      geo should be(MultiPolygon(List(
        Polygon(List(
          Point(longitude = -103.894776713, latitude = 32.000149899),
          Point(longitude = -103.890489841, latitude = 32.000150665),
          Point(longitude = -103.890490162, latitude = 32.002410672),
          Point(longitude = -103.894776629, latitude = 32.002407742),
          Point(longitude = -103.894776713, latitude = 32.000149899)
        )),
        Polygon(List(
          Point(longitude = -103.894818052, latitude = 32.020661933),
          Point(longitude = -103.894807646, latitude = 32.017011035),
          Point(longitude = -103.894797235, latitude = 32.013359954),
          Point(longitude = -103.894786827, latitude = 32.009709053),
          Point(longitude = -103.894776598, latitude = 32.006058151),
          Point(longitude = -103.894776611, latitude = 32.004581088),
          Point(longitude = -103.894776574, latitude = 32.003104024),
          Point(longitude = -103.890490727, latitude = 32.003106436),
          Point(longitude = -103.890490669, latitude = 32.006061933),
          Point(longitude = -103.890527994, latitude = 32.020667698),
          Point(longitude = -103.894818052, latitude = 32.020661933)
        ))
      )))
    }
    "parse another String multipolygon" in {
      val geo = Geo.parseString("""MULTIPOLYGON(((-113.84090421351823 40.87825908562199,-113.8363925736136 40.878258925960985,-113.83642064235633 40.87656064875679,-113.83425158496728 40.87653995898219,-113.83427875371866 40.87489370078145,-113.8343464071979 40.870778235377,-113.83217770870661 40.870757724548405,-113.83210987632788 40.87487318994378,-113.83208288657589 40.876519448125826,-113.82666060145166 40.876467813560616,-113.82663343270026 40.87811407173898,-113.82663109372162 40.878258069727906,-113.82182334577189 40.87825719113926,-113.82181773925524 40.874637078785284,-113.82181213173972 40.8710169663648,-113.82180652422417 40.86739667398256,-113.82180091780741 40.8637765616031,-113.82658364769544 40.863772401199334,-113.83136637758349 40.86376824087084,-113.83615540751093 40.86376624044116,-113.84090573651136 40.863764420103706,-113.8409054009874 40.8673881314725,-113.84090506546343 40.87101184283109,-113.8409045489423 40.87463555421874,-113.84090421351823 40.87825908562199),(-113.8309363914785 40.87019973759577,-113.83043615320666 40.86946948948777,-113.82993573403759 40.86873924148417,-113.82760557769572 40.869655618766224,-113.82527542135385 40.87057181703979,-113.82577566062456 40.87130206507602,-113.82627607979364 40.872032133146064,-113.82860623513663 40.871115935818246,-113.8309363914785 40.87019973759577)))""")
      geo should be(MultiPolygon(List(
        Polygon(List(
          Point(40.87825908562199, -113.84090421351823), Point(40.878258925960985, -113.8363925736136), Point(40.87656064875679, -113.83642064235633), Point(40.87653995898219, -113.83425158496728), Point(40.87489370078145, -113.83427875371866), Point(40.870778235377, -113.8343464071979), Point(40.870757724548405, -113.83217770870661), Point(40.87487318994378, -113.83210987632788), Point(40.876519448125826, -113.83208288657589), Point(40.876467813560616, -113.82666060145166), Point(40.87811407173898, -113.82663343270026), Point(40.878258069727906, -113.82663109372162), Point(40.87825719113926, -113.82182334577189), Point(40.874637078785284, -113.82181773925524), Point(40.8710169663648, -113.82181213173972), Point(40.86739667398256, -113.82180652422417), Point(40.8637765616031, -113.82180091780741), Point(40.863772401199334, -113.82658364769544), Point(40.86376824087084, -113.83136637758349), Point(40.86376624044116, -113.83615540751093), Point(40.863764420103706, -113.84090573651136), Point(40.8673881314725, -113.8409054009874), Point(40.87101184283109, -113.84090506546343), Point(40.87463555421874, -113.8409045489423), Point(40.87825908562199, -113.84090421351823)
        ))
      )))
    }
    "parse a JSON multipolygon" in {
      val json = JsonParser("""{"crs": {"type": "name", "properties": {"name": "urn:ogc:def:crs:EPSG::4269"}}, "type": "GeometryCollection", "geometries": [{"type": "MultiPolygon", "coordinates": [[[[-103.894776713, 32.000149899], [-103.890489841, 32.000150665], [-103.890490162, 32.002410672], [-103.894776629, 32.002407742], [-103.894776713, 32.000149899]]], [[[-103.894818052, 32.020661933], [-103.894807646, 32.017011035], [-103.894797235, 32.013359954], [-103.894786827, 32.009709053], [-103.894776598, 32.006058151], [-103.894776611, 32.004581088], [-103.894776574, 32.003104024], [-103.890490727, 32.003106436], [-103.890490669, 32.006061933], [-103.890527994, 32.020667698], [-103.894818052, 32.020661933]]]]}]}""")
      val geo = Geo.parse(json)
      geo should be(MultiPolygon(List(
        Polygon(List(
          Point(longitude = -103.894776713, latitude = 32.000149899),
          Point(longitude = -103.890489841, latitude = 32.000150665),
          Point(longitude = -103.890490162, latitude = 32.002410672),
          Point(longitude = -103.894776629, latitude = 32.002407742),
          Point(longitude = -103.894776713, latitude = 32.000149899)
        )),
        Polygon(List(
          Point(longitude = -103.894818052, latitude = 32.020661933),
          Point(longitude = -103.894807646, latitude = 32.017011035),
          Point(longitude = -103.894797235, latitude = 32.013359954),
          Point(longitude = -103.894786827, latitude = 32.009709053),
          Point(longitude = -103.894776598, latitude = 32.006058151),
          Point(longitude = -103.894776611, latitude = 32.004581088),
          Point(longitude = -103.894776574, latitude = 32.003104024),
          Point(longitude = -103.890490727, latitude = 32.003106436),
          Point(longitude = -103.890490669, latitude = 32.006061933),
          Point(longitude = -103.890527994, latitude = 32.020667698),
          Point(longitude = -103.894818052, latitude = 32.020661933)
        ))
      )))
    }
    "parse a multi-level geometry collection" in {
      val json = JsonParser("""{"crs": {"type": "name", "properties": {"name": "urn:ogc:def:crs:EPSG::4269"}}, "type": "GeometryCollection", "geometries": [{"type": "GeometryCollection", "geometries": [{"type": "Polygon", "coordinates": [[[-103.520208844, 33.519270954], [-103.520208848, 33.519270999], [-103.52011766, 33.526514651], [-103.520117659, 33.526514651], [-103.519644278, 33.540956508], [-103.519644272, 33.540956552], [-103.519644229, 33.540956557], [-103.510915724, 33.541056059], [-103.510915678, 33.541056055], [-103.510915675, 33.54105601], [-103.511152616, 33.533861856], [-103.51115433, 33.533809829], [-103.511271087, 33.530264804], [-103.511389559, 33.526667664], [-103.511389559, 33.526667642], [-103.511472584, 33.519463527], [-103.511472999, 33.519427506], [-103.511473004, 33.519427455], [-103.511473049, 33.51942745], [-103.520208798, 33.51927095], [-103.520208844, 33.519270954]]]}, {"type": "LineString", "coordinates": [[-103.52011766, 33.526514651], [-103.520117662, 33.526514651]]}]}]}""")
      val geo = Geo.parse(json)
      geo should be(GeometryCollection(List(
        Polygon(List(
          Point(33.519270954, -103.520208844),
          Point(33.519270999, -103.520208848),
          Point(33.526514651, -103.52011766),
          Point(33.526514651, -103.520117659),
          Point(33.540956508, -103.519644278),
          Point(33.540956552, -103.519644272),
          Point(33.540956557, -103.519644229),
          Point(33.541056059, -103.510915724),
          Point(33.541056055, -103.510915678),
          Point(33.54105601, -103.510915675),
          Point(33.533861856, -103.511152616),
          Point(33.533809829, -103.51115433),
          Point(33.530264804, -103.511271087),
          Point(33.526667664, -103.511389559),
          Point(33.526667642, -103.511389559),
          Point(33.519463527, -103.511472584),
          Point(33.519427506, -103.511472999),
          Point(33.519427455, -103.511473004),
          Point(33.51942745, -103.511473049),
          Point(33.51927095, -103.520208798),
          Point(33.519270954, -103.520208844)
        )),
        Line(List(
          Point(33.526514651, -103.52011766),
          Point(33.526514651, -103.520117662)
        ))
      )))
    }
    "verify valid GeoJSON coming back" in {
      val json = JsonParser("""{"crs": {"type": "name", "properties": {"name": "urn:ogc:def:crs:EPSG::4269"}}, "type": "GeometryCollection", "geometries": [{"type": "MultiPolygon", "coordinates": [[[[-103.894776713, 32.000149899], [-103.890489841, 32.000150665], [-103.890490162, 32.002410672], [-103.894776629, 32.002407742], [-103.894776713, 32.000149899]]], [[[-103.894818052, 32.020661933], [-103.894807646, 32.017011035], [-103.894797235, 32.013359954], [-103.894786827, 32.009709053], [-103.894776598, 32.006058151], [-103.894776611, 32.004581088], [-103.894776574, 32.003104024], [-103.890490727, 32.003106436], [-103.890490669, 32.006061933], [-103.890527994, 32.020667698], [-103.894818052, 32.020661933]]]]}]}""")
      val geo = Geo.parse(json)
      val expected = JsonParser(
        """{
          |  "type": "MultiPolygon",
          |  "coordinates": [
          |    [
          |      [
          |        [
          |          -103.894776713,
          |          32.000149899
          |        ],
          |        [
          |          -103.890489841,
          |          32.000150665
          |        ],
          |        [
          |          -103.890490162,
          |          32.002410672
          |        ],
          |        [
          |          -103.894776629,
          |          32.002407742
          |        ],
          |        [
          |          -103.894776713,
          |          32.000149899
          |        ]
          |      ]
          |    ],
          |    [
          |      [
          |        [
          |          -103.894818052,
          |          32.020661933
          |        ],
          |        [
          |          -103.894807646,
          |          32.017011035
          |        ],
          |        [
          |          -103.894797235,
          |          32.013359954
          |        ],
          |        [
          |          -103.894786827,
          |          32.009709053
          |        ],
          |        [
          |          -103.894776598,
          |          32.006058151
          |        ],
          |        [
          |          -103.894776611,
          |          32.004581088
          |        ],
          |        [
          |          -103.894776574,
          |          32.003104024
          |        ],
          |        [
          |          -103.890490727,
          |          32.003106436
          |        ],
          |        [
          |          -103.890490669,
          |          32.006061933
          |        ],
          |        [
          |          -103.890527994,
          |          32.020667698
          |        ],
          |        [
          |          -103.894818052,
          |          32.020661933
          |        ]
          |      ]
          |    ]
          |  ]
          |}""".stripMargin)
      geo.json should be(expected)
    }
  }
}
